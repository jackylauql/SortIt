{"version":3,"sources":["components/Data.js","components/DataContainer.js","components/NavigationButtons.js","components/NavigationBar.js","App.js","reportWebVitals.js","index.js"],"names":["Data","dataObject","style","display","verticalAlign","textAlign","height","value","width","margin","backgroundColor","color","DataContainer","dataArray","data","i","length","push","position","alignItems","NavigationButtons","sorting","animationSpeed","text","onClick","disabled","border","padding","NavigationBar","buttonFunctions","className","justifyContent","randomizeData","changeAnimationSpeed","mergeSort","bubbleSort","quickSort","heapSort","insertionSort","bottom","App","sortedColor","sortingColor","unsortedColor","quickSortPivotColor","treeColor","resetColor","setDataArray","generateRandomData","amountOfData","randomValue","Math","floor","random","useState","setAnimationSpeed","setSorting","newData","animation","Promise","resolve","reject","setTimeout","a","currentPass","changes","lower_value","arrayToSort","left","right","pivot","lowerIndex","temp","colorLowerIndex","mergeArrays","leftArray","rightArray","arrayToLeft","arrayToRight","mergedArray","animationArray","shift","newArray","splitArray","arrayToSplit","half","ceil","halfArray","splice","unsortedArray","sortedArray","oldArray","index","slice","getParentIndex","childIndex","heapifyUp","parentIndex","parentValue","heapifyDown","leftChildIndex","rightChildIndex","colorHeap","arrayToColor","level","items","heapifySort","pop","placeItems","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79aa9c3c.chunk.js","sourcesContent":["const Data = ({ dataObject }) => {\r\n    return (\r\n        <span style={{\r\n            display: 'inline-block',\r\n            verticalAlign: 'top',\r\n            textAlign: 'center',\r\n            height: `${dataObject.value}px`,\r\n            width: `${dataObject.width}px`,\r\n            margin: '0 0.5px',\r\n            backgroundColor: (dataObject.color)\r\n        }}>\r\n            \r\n        </span>            \r\n    )\r\n}\r\n\r\nexport default Data\r\n","import Data from './Data';\r\n\r\nconst DataContainer = ({ dataArray }) => {   \r\n\r\n    const data = []\r\n    for (let i=0; i < dataArray.length; i++) {\r\n        data.push(<Data dataObject={dataArray[i]} key={dataArray[i].position}/>)\r\n    }\r\n    return (\r\n        <div style={{\r\n            display:'flex',\r\n            alignItems: 'flex-end',\r\n            height:'650px',\r\n            width:'1200px',\r\n        }}>\r\n            {data}\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default DataContainer\r\n","// import PropTypes from 'prop-types';\r\n\r\nconst NavigationButtons = ({ sorting, animationSpeed, text, onClick, width }) => {\r\n    return (\r\n        <button disabled={sorting===true} onClick={onClick} style={{\r\n            backgroundColor:(text === animationSpeed? '#77C063': '#CA302D'), // Green or Red\r\n            border:'1px solid black',\r\n            margin: '0px 2px',\r\n            padding: '5px 10px',\r\n            border: (text === animationSpeed? '1px solid #77C063': '1px solid #CA302D'),\r\n            borderRadius: '5px',\r\n            boxShadow: (text === animationSpeed? '3px 3px #013220': '3px 3px #580000'),\r\n            width: `${width}px`\r\n        }}>\r\n            {animationSpeed? text + 'x': text}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default NavigationButtons\r\n","import NavigationButtons from './NavigationButtons';\r\n\r\nconst NavigationBar = ({ sorting, animationSpeed, buttonFunctions }) => {\r\n    return (\r\n        <div>\r\n            <div className=\"navigation-bar\" style={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                width:'100%',\r\n                height: '80px'\r\n            }}>\r\n                <div>\r\n                    <h1 style={{textAlign: 'center'}}>Size of Data</h1>\r\n                    <span style={{margin:'0 20px'}} className='buttonColumn'>\r\n                        <NavigationButtons sorting={sorting} text={'10'} width={53} onClick={() => buttonFunctions.randomizeData(10)}/>\r\n                        <NavigationButtons sorting={sorting} text={'50'} width={53} onClick={() => buttonFunctions.randomizeData(50)}/>\r\n                        <NavigationButtons sorting={sorting} text={'100'} width={53} onClick={() => buttonFunctions.randomizeData(100)}/>\r\n                        <NavigationButtons sorting={sorting} text={'200'} width={53} onClick={() => buttonFunctions.randomizeData(200)}/>\r\n                    </span>\r\n                </div>\r\n                <div>\r\n                    <h1 style={{textAlign: 'center'}}>Sorting Speed</h1>\r\n                    <span style={{margin:'0 20px'}} className='buttonColumn'>\r\n                        <NavigationButtons sorting={sorting} animationSpeed={animationSpeed} width={53} text={1} onClick={() => buttonFunctions.changeAnimationSpeed(1)}/>\r\n                        <NavigationButtons sorting={sorting} animationSpeed={animationSpeed} width={53} text={2} onClick={() => buttonFunctions.changeAnimationSpeed(2)}/>\r\n                        <NavigationButtons sorting={sorting} animationSpeed={animationSpeed} width={53} text={5} onClick={() => buttonFunctions.changeAnimationSpeed(5)}/>\r\n                        <NavigationButtons sorting={sorting} animationSpeed={animationSpeed} width={53} text={10} onClick={() => buttonFunctions.changeAnimationSpeed(10)}/>\r\n                        <NavigationButtons sorting={sorting} animationSpeed={animationSpeed} width={53} text={50} onClick={() => buttonFunctions.changeAnimationSpeed(50)}/>\r\n                    </span>\r\n                </div>\r\n\r\n                <div>\r\n                    <h1 style={{ textAlign: 'center'}}>Algorithms</h1>\r\n                    <span style={{margin:'0 10px'}} className='buttonColumn'>\r\n                        <NavigationButtons sorting={sorting} text={'MergeSort'} width={127} onClick={() => buttonFunctions.mergeSort()}/>\r\n                    </span>\r\n                    <span style={{margin:'0 20px'}} className='buttonColumn'>\r\n                        <NavigationButtons sorting={sorting} text={'BubbleSort'} width={127} onClick={() => buttonFunctions.bubbleSort(1)}/>\r\n                    </span>\r\n                    <span style={{margin:'0 10px'}} className='buttonColumn'>\r\n                        <NavigationButtons sorting={sorting} text={'QuickSort'} width={127} onClick={() => buttonFunctions.quickSort()}/>\r\n                    </span>\r\n                    <span style={{margin:'0 20px'}} className='buttonColumn'>\r\n                        <NavigationButtons sorting={sorting} text={'HeapSort'} width={127} onClick={() => buttonFunctions.heapSort()}/>\r\n                    </span>\r\n                    <span style={{margin:'0 10px'}} className='buttonColumn'>\r\n                        <NavigationButtons sorting={sorting} text={'InsertionSort'} width={127} onClick={() => buttonFunctions.insertionSort()}/>\r\n                    </span>\r\n                    \r\n\r\n                </div>\r\n\r\n            </div>\r\n            <hr style={{\r\n                position: 'relative',\r\n                bottom: '5px',\r\n                border: '1px solid #141414',\r\n                width: '100%'\r\n            }}></hr>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default NavigationBar","import {useState} from 'react'\r\nimport DataContainer from './components/DataContainer';\r\nimport NavigationBar from './components/NavigationBar';\r\n\r\nfunction App() {\r\n  // Initialization Variables\r\n  const [\r\n    sortedColor, \r\n    sortingColor, \r\n    unsortedColor, \r\n    quickSortPivotColor, \r\n    treeColor] = \r\n  [\r\n    '#173F5F', // sortedColor\r\n    '#3CAEA3', // sortingColor\r\n    '#20639B', // unsortedColor\r\n    '#ED553B', // quickSortPivotColor\r\n    ['#91E3F7', '#4ED2F2', '#10BFE9', '#0B88A6', '#096D85', '#075264', '#043642', '#01171a']] \r\n\r\n  const resetColor = () => {\r\n    for (let i = 0; i < dataArray.length; i ++) {\r\n      dataArray[i].color = unsortedColor\r\n    }\r\n    setDataArray([...dataArray])\r\n  }\r\n\r\n  const generateRandomData = (amountOfData) => {\r\n    const dataArray = []\r\n    for (let i = 0; i < amountOfData; i++) {\r\n        const randomValue = Math.floor(Math.random() * 600)\r\n        dataArray.push({\r\n          value: randomValue,\r\n          position: i,\r\n          width: 1200/(amountOfData) - 1,\r\n          color: unsortedColor\r\n        })\r\n    }\r\n    return dataArray\r\n  }\r\n\r\n  // All States\r\n  const [dataArray, setDataArray] = useState(generateRandomData(10))\r\n  const [animationSpeed, setAnimationSpeed] = useState(5)\r\n  const [sorting, setSorting] = useState(false)\r\n\r\n  const buttonFunctions = {\r\n    randomizeData: (amountOfData) => {\r\n      const newData = generateRandomData(amountOfData)\r\n      setDataArray(newData)\r\n    },\r\n\r\n    changeAnimationSpeed: (animationSpeed) => {\r\n      setAnimationSpeed(animationSpeed)\r\n    },\r\n\r\n    animation: (animationSpeed) => {\r\n      return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n          resolve()\r\n        }, 500 / animationSpeed)\r\n      })\r\n    },\r\n\r\n    // Sorting Functions\r\n    bubbleSort: async (currentPass=1) => {      \r\n      let changes = false\r\n      setSorting(true)\r\n      const newData = dataArray\r\n      \r\n      for (let i = 0; i < newData.length - currentPass; i++) {\r\n        newData[i].color = sortingColor\r\n        newData[i+1].color = sortingColor\r\n        await buttonFunctions.animation(animationSpeed)\r\n        if (newData[i].value > newData[i+1].value) {\r\n            const lower_value = newData[i+1]\r\n            newData[i+1] = newData[i]\r\n            newData[i] = lower_value\r\n            changes = true\r\n        }\r\n        setDataArray([...newData]) // a new instance is mapped so the component rerenders\r\n        newData[i].color = unsortedColor\r\n        newData[i+1].color = unsortedColor\r\n      }\r\n      newData[newData.length - currentPass].color = sortedColor\r\n      \r\n      if (!changes) {\r\n        for (let i = 0; i < newData.length - currentPass; i++) {\r\n          newData[i].color = sortedColor\r\n        }\r\n        setSorting(false)\r\n        return setDataArray([...newData])\r\n      }\r\n      buttonFunctions.bubbleSort(currentPass+1) \r\n    },\r\n\r\n    quickSort: async (arrayToSort=dataArray, left = 0, right = arrayToSort.length) => {\r\n      setSorting(true)\r\n      if (left === right) {\r\n        return setDataArray([...dataArray])\r\n      }\r\n      \r\n      const pivot = arrayToSort[right - 1]\r\n      arrayToSort[right - 1].color = quickSortPivotColor\r\n      let lowerIndex = left\r\n      for (let i = left; i < right; i ++) {\r\n        arrayToSort[i].color = sortingColor\r\n        if (arrayToSort[i].value < pivot.value) {\r\n          const temp = arrayToSort[i]\r\n          arrayToSort[i] = arrayToSort[lowerIndex]\r\n          arrayToSort[i].color = sortingColor\r\n          arrayToSort[lowerIndex] = temp\r\n          lowerIndex += 1\r\n        }\r\n        await buttonFunctions.animation(animationSpeed)\r\n        setDataArray([...arrayToSort])\r\n        arrayToSort[i].color = unsortedColor\r\n        if (lowerIndex !== left) arrayToSort[lowerIndex - 1].color = unsortedColor\r\n      }\r\n      arrayToSort[right - 1] = arrayToSort[lowerIndex]\r\n      arrayToSort[lowerIndex] = pivot\r\n      let colorLowerIndex = lowerIndex\r\n      while (arrayToSort[colorLowerIndex] && arrayToSort[colorLowerIndex].value === arrayToSort[lowerIndex].value) {\r\n        arrayToSort[colorLowerIndex].color = sortedColor\r\n        colorLowerIndex += 1\r\n      }\r\n  \r\n      await buttonFunctions.quickSort(arrayToSort, left, lowerIndex)\r\n      await buttonFunctions.quickSort(arrayToSort, lowerIndex + 1, right)\r\n\r\n      setSorting(false)\r\n    },\r\n\r\n    mergeSort: async () => {\r\n      setSorting(true)\r\n      resetColor()\r\n      const mergeArrays = async (leftArray, rightArray, arrayToLeft, arrayToRight) => {\r\n        \r\n        const mergedArray = []\r\n        \r\n        // Change color of data to sortingColor\r\n        for (let i = 0; i < leftArray.length; i ++) {\r\n          if (leftArray[i]) leftArray[i].color = sortingColor\r\n          if (rightArray[i]) rightArray[i].color = sortingColor\r\n          const animationArray = [...arrayToLeft, ...leftArray, ...rightArray, ...arrayToRight]\r\n          setDataArray([...animationArray])  \r\n          await buttonFunctions.animation(animationSpeed)\r\n        }\r\n\r\n        // Sort the 2 given arrays\r\n        while (leftArray.length && rightArray.length) {\r\n          if (leftArray[0].value < rightArray[0].value) {\r\n            mergedArray.push(leftArray.shift())\r\n          } else {\r\n            mergedArray.push(rightArray.shift())\r\n          }\r\n        }\r\n        \r\n        // Merge the sorted array with what is leftover from left/right array(...leftArray, ...rightArray)\r\n        // and the original array(...arrayToLeft, ...arrayToRight)\r\n        const newArray = [...arrayToLeft, ...mergedArray, ...leftArray, ...rightArray, ...arrayToRight]\r\n        for (let i = 0; i < newArray.length; i ++) {\r\n          newArray[i].color = unsortedColor\r\n        }\r\n        await buttonFunctions.animation(animationSpeed)\r\n        setDataArray(newArray)\r\n        return [...mergedArray, ...leftArray, ...rightArray]\r\n      }\r\n    \r\n      const splitArray = async (arrayToSplit, arrayToLeft, arrayToRight) => {\r\n          \r\n          if (arrayToSplit.length < 2) {\r\n            return arrayToSplit\r\n          }\r\n      \r\n          const half = Math.ceil(arrayToSplit.length / 2)\r\n          const halfArray = arrayToSplit.splice(0, half)\r\n\r\n          const leftArray = await splitArray(halfArray, arrayToLeft, [...arrayToSplit, ...arrayToRight])\r\n          const rightArray = await splitArray(arrayToSplit, [...arrayToLeft, ...leftArray], arrayToRight)          \r\n          \r\n          const mergedArray = await mergeArrays(leftArray, rightArray, arrayToLeft, arrayToRight)\r\n          return mergedArray\r\n      }\r\n      \r\n      const unsortedArray = [...dataArray]\r\n      const sortedArray = await splitArray(unsortedArray, [], [])\r\n      \r\n      for (let i = 0; i < sortedArray.length; i ++) {\r\n        sortedArray[i].color = sortedColor\r\n        setDataArray([...sortedArray])\r\n        await buttonFunctions.animation(animationSpeed * 5)\r\n      }\r\n      setSorting(false)\r\n      \r\n    },\r\n\r\n    insertionSort: async () => {\r\n      setSorting(true)\r\n      resetColor()\r\n      let oldArray = dataArray\r\n      for (let i = 1; i < oldArray.length; i ++) {\r\n        let index = i\r\n        oldArray[i].color = sortingColor\r\n        setDataArray([...oldArray])\r\n        await buttonFunctions.animation(animationSpeed)\r\n\r\n        const sortedArray = oldArray.slice(0, i)\r\n        const unsortedArray = oldArray.slice(i + 1)\r\n\r\n        while (index > 0 && oldArray[i].value < oldArray[index - 1].value) {\r\n            index -= 1\r\n        }\r\n\r\n        sortedArray.splice(index, 0, oldArray[i])\r\n\r\n        const newArray = [...sortedArray, ...unsortedArray]\r\n\r\n        setDataArray([...newArray])\r\n        await buttonFunctions.animation(animationSpeed)\r\n        newArray[index].color = unsortedColor\r\n        oldArray = newArray\r\n      }\r\n\r\n      for (let i = 0; i < oldArray.length; i ++) {\r\n        oldArray[i].color = sortedColor\r\n        setDataArray([...oldArray])\r\n        await buttonFunctions.animation(animationSpeed * 5)\r\n      }\r\n\r\n      setSorting(false)\r\n    },\r\n\r\n    heapSort : async () => {\r\n      setSorting(true)\r\n      resetColor()\r\n      const sortedArray = []\r\n  \r\n      const getParentIndex = (childIndex) => {\r\n          return Math.floor((childIndex - 1) / 2)\r\n      }\r\n  \r\n      const heapifyUp = (childIndex) => {\r\n          if (childIndex === 0) return\r\n          const parentIndex = (childIndex <= 2? 0 : getParentIndex(childIndex))\r\n          if (dataArray[childIndex].value > dataArray[parentIndex].value) {\r\n              const parentValue = dataArray[parentIndex]\r\n              dataArray[parentIndex] = dataArray[childIndex]\r\n              dataArray[childIndex] = parentValue\r\n              heapifyUp(parentIndex)\r\n          }\r\n      }\r\n  \r\n      const heapifyDown = (index) => {\r\n          const leftChildIndex = (index * 2) + 1\r\n          const rightChildIndex = (index * 2) + 2\r\n  \r\n          if (!dataArray[leftChildIndex] && !dataArray[rightChildIndex]) return\r\n          if (dataArray[leftChildIndex] && dataArray[rightChildIndex]) {\r\n            if (dataArray[index].value < dataArray[leftChildIndex].value || dataArray[index].value < dataArray[rightChildIndex].value) {\r\n              if (dataArray[leftChildIndex].value > dataArray[rightChildIndex].value) {\r\n                  [dataArray[index], dataArray[leftChildIndex]] = [dataArray[leftChildIndex], dataArray[index]]\r\n                  heapifyDown(leftChildIndex)\r\n              } else {\r\n                  [dataArray[index], dataArray[rightChildIndex]] = [dataArray[rightChildIndex], dataArray[index]]\r\n                  heapifyDown(rightChildIndex)\r\n              }\r\n            }\r\n          } else if (dataArray[leftChildIndex]) {\r\n              if ((dataArray[index].value < dataArray[leftChildIndex].value)) {\r\n                [dataArray[index], dataArray[leftChildIndex]] = [dataArray[leftChildIndex], dataArray[index]]\r\n                heapifyDown(leftChildIndex)\r\n              } \r\n          } else {\r\n              if ((dataArray[index].value < dataArray[rightChildIndex].value)) {\r\n                [dataArray[index], dataArray[rightChildIndex]] = [dataArray[rightChildIndex], dataArray[index]]\r\n                heapifyDown(rightChildIndex)\r\n              }\r\n          }\r\n      }\r\n\r\n      const colorHeap = async (arrayToColor, sortedArray) => {\r\n        let index = 0\r\n        let level = 0\r\n        let items = 1\r\n        while (index < arrayToColor.length) {\r\n          for (let i = 0; i < items && index < arrayToColor.length; i ++) {\r\n            arrayToColor[index].color = treeColor[level]\r\n            index += 1\r\n            setDataArray([...arrayToColor, ...sortedArray])\r\n            await buttonFunctions.animation(animationSpeed)\r\n          }\r\n          items *= 2\r\n          level += 1\r\n        }\r\n      }\r\n  \r\n      const heapifySort = async () => {\r\n          if (!dataArray.length) return\r\n          \r\n          heapifyDown(0)\r\n          \r\n          const temp = dataArray[0]\r\n          dataArray[0] = dataArray[dataArray.length - 1]\r\n          dataArray[dataArray.length - 1] = temp\r\n          sortedArray.splice(0, 0, dataArray.pop())\r\n          sortedArray[0].color = sortedColor\r\n          setDataArray([...dataArray, ...sortedArray])\r\n          await buttonFunctions.animation(animationSpeed)\r\n          await heapifySort()\r\n      }\r\n  \r\n  \r\n      for (let i = 0; i < dataArray.length; i++) {\r\n          const leftChildIndex = (i * 2) + 1\r\n          const rightChildIndex = (i * 2) + 2\r\n  \r\n          if (!dataArray[leftChildIndex] && !dataArray[rightChildIndex]) continue\r\n        \r\n          if (dataArray[leftChildIndex] && dataArray[rightChildIndex]) {\r\n            if (dataArray[i].value < dataArray[leftChildIndex].value || dataArray[i].value < dataArray[rightChildIndex].value) {\r\n              if (dataArray[leftChildIndex].value < dataArray[rightChildIndex].value) {\r\n                  [dataArray[i], dataArray[rightChildIndex]] = [dataArray[rightChildIndex], dataArray[i]]\r\n                  heapifyUp(i)\r\n                  heapifyUp(leftChildIndex)\r\n              } else {\r\n                  [dataArray[i], dataArray[leftChildIndex]] = [dataArray[leftChildIndex], dataArray[i]]\r\n                  heapifyUp(i)\r\n                  heapifyUp(rightChildIndex)\r\n              }\r\n            }\r\n          } else if (dataArray[leftChildIndex]) {\r\n            if (dataArray[i].value < dataArray[leftChildIndex].value) {\r\n              [dataArray[i], dataArray[leftChildIndex]] = [dataArray[leftChildIndex], dataArray[i]]\r\n              heapifyUp(i)\r\n            }\r\n          } else {\r\n            if (dataArray[i].value < dataArray[rightChildIndex].value) {\r\n              [dataArray[i], dataArray[rightChildIndex]] = [dataArray[rightChildIndex], dataArray[i]]\r\n              heapifyUp(i)\r\n            }\r\n          }\r\n          setDataArray([...dataArray])\r\n          await buttonFunctions.animation(animationSpeed)\r\n      }\r\n  \r\n      [dataArray[0], dataArray[dataArray.length - 1]] = [dataArray[dataArray.length - 1], dataArray[0]]\r\n      sortedArray.splice(0, 0, dataArray.pop())\r\n      await colorHeap(dataArray, sortedArray)\r\n      sortedArray[0].color = sortedColor\r\n      setDataArray([...dataArray, ...sortedArray])\r\n      await buttonFunctions.animation(animationSpeed)\r\n      await heapifySort()\r\n      setSorting(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\" style={{\r\n      display: 'grid', placeItems: 'center'\r\n    }}>\r\n      <NavigationBar sorting={sorting} buttonFunctions={buttonFunctions} animationSpeed={animationSpeed}/>\r\n      <DataContainer dataArray={dataArray}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}